################################################################################
##        Title : Exploration of b-Catenin gene signature expression  T-ALL human samples extracted from public databases. 
##  Description : This script is to obtain Figure 3 in Garcia-Hernandez V manuscript
##         Date : 07th October 2022
################################################################################

################################################################################
## 1. Set up paths
################################################################################

.wd <- getwd()

################################################################################
## 2. Load packages
################################################################################

library(readxl)
library(ggrepel)
library(data.table)
library(RColorBrewer)
library(pheatmap)
library(survival)
library(survminer)
library(ggpubr)
library(tidyr)
library(dplyr)
library(ggplot2)

################################################################################
## 3. Files and objects needed
################################################################################

## expannot_GSE14618_2      #Expression matrix from GSE14618 (COG9404). Generated with 'Cohorts_expression_matrix.R' script.
## bcat_gene_signature.xlsx  #156 b-catenin targets from intersect ChIP-Seq and DEG RNA-Seq
## survival_GSE14618        #Clinical data for 40 out of the 50 patients included in GSE14618 (COG9404 study). Provided by Alejandro Gutierrez.
## enrich.results           #Output of Functional Enrichment analysis performed with 'Enrichr_Analysis.R' script.

################################################################################
## 4. Fig 3A: 79 B-CAT bona-fide targets from intersect ChIP-Seq and DEG DOWN RNA-Seq in Discovery cohort
################################################################################

## Define geneset for exploration ####
genesignature<-read_xlsx("bcat_gene_signature.xlsx", col_names = F)
bcat_pattern <-genesignature$...1
bcat_pattern<-sort(unique(genesignature[genesignature$...3=="DOWN",]$...1))

bcat_sig<-filter(expannot_GSE14618_2, grepl(paste0('^',bcat_pattern,'\\>','$',collapse = '|'),symbol)) ## process microarrays probes symbols 


bcat_sig$Row.names<-NULL
bcat_sig$probe_id<-NULL

# Select unique probeid per gene
bcat_sig<-bcat_sig[order(bcat_sig$GSM365113,decreasing = TRUE),]
bcat_sig<-bcat_sig[!duplicated(bcat_sig$symbol),]

row.names(bcat_sig)<-bcat_sig$symbol
bcat_sig$symbol<-NULL

# Expression levels of TFs of interest
ctnnb1_exp2<-grepl('CTNNB1',expannot_GSE14618_2$symbol)
kaiso_exp2<-grepl('ZBTB33',expannot_GSE14618_2$symbol)
brca1_exp2<-grepl('BRCA1',expannot_GSE14618_2$symbol)
tcf_exp2<-grepl('TCF7',expannot_GSE14618_2$symbol)
lef_exp2<-grepl('LEF1',expannot_GSE14618_2$symbol)

df1<-expannot_GSE14618_2[ctnnb1_exp2,]
df2<-expannot_GSE14618_2[kaiso_exp2,]
df3<-expannot_GSE14618_2[brca1_exp2,]
df4<-expannot_GSE14618_2[tcf_exp2,][c(1:2),]
df5<-expannot_GSE14618_2[lef_exp2,][c(1:3),]

df<-as.data.frame(t(Reduce(function(x, y) merge(x, y, all=TRUE), list(df1, df2, df3, df4, df5))))
df<-df[-c(1:2),]
colnames(df)<-df[1,]
df<-df[-1,]
colnames(df)<-c("bcat_exp_prob1","bcat_exp_prob2","brca1_exp_prob1",
                "tcf_exp_prob1","tcf_exp_prob2","lef_exp_prob1",
                "brca1_exp_prob2","kaiso_exp_prob1",
                "lef_exp_prob2","lef_exp_prob3","bcat_exp_prob3","kaiso_exp_prob2")

## Add pheno data survival provided by Alejandro Gutierrez ####
survival_GSE14618<-data.frame(read_excel("survival_GSE14618_file_provided_by_AlejandroGutierrez.xlsx"))
survival_GSE14618<-survival_GSE14618[survival_GSE14618$GEO_Array_ID!="ND",]
row.names(survival_GSE14618)<-survival_GSE14618$GEO_Array_ID

## Generate heatmap ####
# heatmap only with patients with survival data
t_bcat_sig<-t(bcat_sig)
t_bcat_sig<-t_bcat_sig[row.names(t_bcat_sig) %in% row.names(survival_GSE14618), ]

pheno<-pheno_GSE14618_gpl570[row.names(pheno_GSE14618_gpl570) %in% row.names(t_bcat_sig), ]
df_surv<-df[row.names(df) %in% row.names(t_bcat_sig), ]

pheno<-merge(pheno,df_surv,by="row.names")
row.names(pheno)<-pheno$Row.names
pheno$Row.names<-NULL
pheno<-merge(pheno,survival_GSE14618,by="row.names")
row.names(pheno)<-pheno$Row.names
pheno$Row.names<-NULL

# 
pheno$bcat_exp_prob1<-as.numeric(pheno$bcat_exp_prob1)
pheno$bcat_exp_prob2<-as.numeric(pheno$bcat_exp_prob2)
pheno$bcat_exp_prob3<-as.numeric(pheno$bcat_exp_prob3)
pheno$brca1_exp_prob1<-as.numeric(pheno$brca1_exp_prob1)
pheno$brca1_exp_prob2<-as.numeric(pheno$brca1_exp_prob2)
pheno$kaiso_exp_prob1<-as.numeric(pheno$kaiso_exp_prob1)
pheno$kaiso_exp_prob2<-as.numeric(pheno$kaiso_exp_prob2)
pheno$lef_exp_prob1<-as.numeric(pheno$lef_exp_prob1)
pheno$lef_exp_prob2<-as.numeric(pheno$lef_exp_prob2)
pheno$lef_exp_prob3<-as.numeric(pheno$lef_exp_prob3)
pheno$tcf_exp_prob1<-as.numeric(pheno$tcf_exp_prob1)
pheno$tcf_exp_prob2<-as.numeric(pheno$tcf_exp_prob2)

pheno$Pheno<-gsub(', non-ABD','',pheno$T.ALL_Subset)
pheno$Pheno<-gsub(';.*','',pheno$Pheno)

# Invert values for Alive variable in pheno dataframe (original 0 = dead; final 1 = dead)
pheno$Alive<-as.integer(pheno$Alive)
pheno$Alive_status<-gsub('1','zero',pheno$Alive)
pheno$Alive_status<-gsub('0','one',pheno$Alive_status)

pheno$Alive_status<-gsub('zero',0,pheno$Alive_status)
pheno$Alive_status<-gsub('one',1,pheno$Alive_status)

pheno$Alive_status<-as.integer(pheno$Alive_status)


## generate heatmap with pheatmap
myBreaks <- c(seq(min(scale(t_bcat_sig_2)), 0, length.out=round(ceiling(paletteLength*0.45))),
              seq(0.1,2.5,length.out = round(ceiling(paletteLength*0.45))),
              seq(2.6, max(scale(t_bcat_sig_2)), length.out=round(floor(paletteLength*0.10))))

phet<-pheatmap(as.data.frame(t(scale(t_bcat_sig_2))),
               annotation_col = pheno[,c(53,64,61,63)],
               #  annotation_row = colcol[,c(6,11,12,13,14)],
               show_colnames=F,
               show_rownames = T,
               fontsize = 4,
               cutree_cols = 5,
               cutree_rows = 3,
               color=cols,
               breaks=myBreaks)




################################################################################
## 5. Preparation of patient and gene clusters objects for further interrogation
################################################################################

# Identify and store patient and gene clusters info ####
clusters<-data.frame(cluster=sort(cutree(phet$tree_row, k=3)))
patients<-data.frame(cluster=sort(cutree(phet$tree_col, k=5)))

table(patients$cluster)
table(clusters$cluster)
clusters$Gene<-row.names(clusters)

# Export inputs for Functional Enrichment analysis in Fig 3d and for ssGSEA in Figure 4 ####
tclust1<-rbind(as.data.frame(t(clusters[clusters$cluster==1,])))
tclust1<-cbind("cluster1","na",tclust1[-1,])
write.table(tclust1,"/Directory/cluster1_micro_downrnaseq.txt",row.names = FALSE,quote = FALSE, col.names = FALSE,sep="\t")

tclust2<-rbind(as.data.frame(t(clusters[clusters$cluster==2,])))
tclust2<-cbind("cluster2","na",tclust2[-1,])
write.table(tclust2,"/Directory/cluster2_micro_downrnaseq.txt",row.names = FALSE,quote = FALSE, col.names = FALSE,sep="\t")

tclust3<-rbind(as.data.frame(t(clusters[clusters$cluster==3,])))
tclust3<-cbind("cluster3","na",tclust3[-1,])
write.table(tclust3,"/Directory/cluster3_micro_downrnaseq.txt",row.names = FALSE,quote = FALSE, col.names = FALSE,sep="\t")

# Order genes (object clusters) ####
geneorder<-data.frame(Gene=rownames(as.data.frame(t(scale(t_bcat_sig)))[phet$tree_row[["order"]],]))
geneorder$order<-row.names(geneorder)
row.names(geneorder)<-geneorder$Gene

clusters<-merge(clusters,geneorder,by="Gene")
clusters$order<-as.numeric(clusters$order)

# Order patients (object patients) ####
patientorder<-data.frame(Sample=colnames(as.data.frame(t(scale(t_bcat_sig)))[,phet$tree_col[["order"]]]))
patientorder$order<-row.names(patientorder)
row.names(patientorder)<-patientorder$Sample
patientorder$Sample<-NULL

patients<-merge(patients,patientorder,by="row.names")
row.names(patients)<-patients$Row.names
patients$Row.names<-NULL
patients$order<-as.numeric(patients$order)

# Merge metadata with patients classification in clusters ####
patinfo<-merge(pheno, patients,by="row.names")
## Levels of TFs of interest as numeric
patinfo$bcat_exp_prob1<-as.numeric(patinfo$bcat_exp_prob1)
patinfo$bcat_exp_prob2<-as.numeric(patinfo$bcat_exp_prob2)
patinfo$bcat_exp_prob3<-as.numeric(patinfo$bcat_exp_prob3)

patinfo$brca1_exp_prob1<-as.numeric(patinfo$brca1_exp_prob1)
patinfo$brca1_exp_prob2<-as.numeric(patinfo$brca1_exp_prob2)

patinfo$kaiso_exp_prob1<-as.numeric(patinfo$kaiso_exp_prob1)
patinfo$kaiso_exp_prob2<-as.numeric(patinfo$kaiso_exp_prob2)

patinfo$tcf_exp_prob1<-as.numeric(patinfo$tcf_exp_prob1)
patinfo$tcf_exp_prob2<-as.numeric(patinfo$tcf_exp_prob2)

patinfo$lef_exp_prob1<-as.numeric(patinfo$lef_exp_prob1)
patinfo$lef_exp_prob2<-as.numeric(patinfo$lef_exp_prob2)

patinfo<-patinfo[,-2]








################################################################################
## 6. Fig 3b: Proportion of outcome per cluster
################################################################################
prop_clust1<-data.frame(prop.table(table(patinfo$cluster,patinfo$Outcome),1))
colnames(prop_clust1)<-c("cluster","First_event","Proportion")
prop_clust1$cluster<-as.factor(prop_clust1$cluster)

prop_clust1$cluster<- factor(prop_clust1$cluster, levels=c("5","4","1","2","3"))

ggplot(prop_clust1,aes(x=cluster,y=Proportion,fill=First_event))+
  geom_col(color="black")+
  scale_fill_manual(values=c("#00BFC4","#F8766D","#C77CFF","cyan"))+
  theme_bw()+
  theme(legend.position="bottom",
        legend.text = element_text(size=14),
        text = element_text(size=10),
        axis.text.x = element_text(angle=45, size=16,hjust=1),
        axis.text.y = element_blank(),
        axis.title.y = element_text(size=16))


################################################################################
## 7. Fig 3c: survival (Kaplan-Meier) curves per patient cluster 
################################################################################
# Merge metadata with patients classification in clusters ####
pheno_pat<-merge(patients,pheno,by="row.names")
row.names(pheno_pat)<-pheno_pat$Row.names
pheno_pat$Row.names<-NULL

pheno_pat$Event<-as.integer(pheno_pat$Event)
pheno_pat$Alive<-as.integer(pheno_pat$Alive)

pheno_pat$Alive_bin<-gsub('1','zero',pheno_pat$Alive)
pheno_pat$Alive_bin<-gsub('0','one',pheno_pat$Alive_bin)

pheno_pat$Alive_bin<-gsub('zero',0,pheno_pat$Alive_bin)
pheno_pat$Alive_bin<-gsub('one',1,pheno_pat$Alive_bin)

pheno_pat$Alive_bin<-as.integer(pheno_pat$Alive_bin)

# DFS (disease free survival) ####
surv_C_fit_TALL <- survfit(Surv(EFS_yrs, Event) ~ cluster, data=pheno_pat)
ggsurvplot(surv_C_fit_TALL, data = pheno_pat,
           pval = TRUE,
           size=2,
           palette = c("deeppink2","gray87","gray60","gray73","black"),
           ggtheme = theme_bw()+theme(legend.position = "bottom",
                                      legend.text = element_text(size=14),
                                      text = element_text(size=20),
                                      axis.text.x = element_text(angle=45, size=20,hjust=1),
                                      axis.text.y = element_text(size=20,hjust=1)),
           font.x = c(20),
           font.y = c(20))

# OS (overall survival) ####
surv_C_fit_TALL <- survfit(Surv(Surv_yrs, Alive_bin) ~ cluster, data=pheno_pat)
ggsurvplot(surv_C_fit_TALL, data = pheno_pat,
           pval = TRUE,
           size=2,
           palette = c("deeppink2", "gray87","gray60","gray73","black"),
           ggtheme = theme_bw()+theme(legend.position = "bottom",
                                      legend.text = element_text(size=14),
                                      text = element_text(size=20),
                                      axis.text.x = element_text(angle=45, size=20,hjust=1),
                                      axis.text.y = element_text(size=20,hjust=1)),
           font.x = c(20),
           font.y = c(20))



################################################################################
## 8. Fig 3d: Functional enrichment of genes included in clusters G1, G2, G3 
################################################################################
# Load Functional enrichment results from "Enrichr_Analysis.R" script ####
cluster1_BP<-enrich.results$Fig3_ClusterG1
cluster1_BP$group<-"cluster1"
cluster2_BP<-enrich.results$Fig3_ClusterG2
cluster2_BP$group<-"cluster2"
cluster3_BP<-enrich.results$Fig3_ClusterG3
cluster3_BP$group<-"cluster3"

# Generate Functional enrichment dataframe ####
clusters_unsup<-rbind(cluster1_BP[1:25,],cluster2_BP[1:25,], cluster3_BP[1:25,])

# Filter significant terms (adjusted.P.value<=0.05) and order by p.value ####
bpsub<-subset(clusters_unsup,clusters_unsup$Adjusted.P.value<=0.05)
bpsub<- bpsub[order(bpsub$P.value),]

bpsub$Term<-as.factor(bpsub$Term)
bpsub$Term <- factor(bpsub$Term, levels=unique((bpsub$Term))[rev(order(bpsub$Term,bpsub$Adjusted.P.value))])



bpsub$Term <-reorder(bpsub$Term, rev(bpsub$P.value))
bpsub$Term <- factor(unique(bpsub$Term), levels=bpsub[rev(order(bpsub$Adjusted.P.value)), ]$Term)

nondup_cat<-as.data.frame(table(bpsub$Term))[as.data.frame(table(bpsub$Term))[,2]<2,]$Var1

bpsub$Term <- factor(bpsub$Term, levels=unique(bpsub[rev(order(bpsub$group, rev(abs(bpsub$Combined.Score)))), ]$Term))

bpsub$Term <- factor(bpsub$Term, levels=unique(bpsub[rev(order(bpsub$group, abs(bpsub$P.value))), ]$Term))

# Graph "Top 25 Enriched Biological Processes (adjp.val<=0.05)" ####
ggplot(bpsub[bpsub$Term %in% nondup_cat,][1:25,], aes(y=group, x=Term)) + 
  geom_tile(aes(fill = -(log(P.value))),colour = "black",size=0.5)+
  scale_fill_gradient2(low = "white",
                       high = "red",
                       midpoint = 7) +
  #scale_fill_gradient(low = "blue", high = "red")+
  theme_cleantable()+
  theme(axis.text.x = element_text(size=8, hjust = 1,vjust=0.5,angle=90),
        axis.text.y = element_text(size=10, hjust = 1,face="italic"))+
  ggtitle("Top 25 Enriched Biological Processes (adjp.val<=0.05)")


################################################################################
## 9. Fig 3e: Multivariate Cox proportional hazard regression model 
################################################################################
# Merge metadata with patients classification in clusters and define factors levels ####
pheno_pat<-merge(patients,pheno,by="row.names")
row.names(pheno_pat)<-pheno_pat$Row.names
pheno_pat$Row.names<-NULL

pheno_pat$Age_hr<-ifelse(pheno_pat$Age<10,"<10",">10")
table(pheno_pat$CNS_Status)

pheno_pat$cluster<-as.factor(pheno_pat$cluster)
pheno_pat$cluster <- factor(pheno_pat$cluster, levels = c("5", "4","3","2","1"))

pheno_pat$Pheno_ETP_ABD<-ifelse(pheno_pat$Pheno=="ETP" | pheno_pat$Pheno=="ABD","ETP/ABD","nonETP/ABD")
pheno_pat$Pheno_ETP_ABD <- factor(pheno_pat$Pheno_ETP_ABD, levels = c("nonETP/ABD","ETP/ABD"))


# Multivariate Cox proportional HR model ####
fit.coxph<- coxph(Surv(EFS_yrs, Event) ~ cluster+Gender+Age_hr+CNS_Status+Pheno_ETP_ABD,
                  data = pheno_pat[pheno_pat$CNS_Status!="No data" & !is.na(pheno_pat$Pheno),],
                  ties = 'exact')

summary(fit.coxph)

# Forest plot ####
ggforest(fit.coxph)
